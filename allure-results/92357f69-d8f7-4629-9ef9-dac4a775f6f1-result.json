{"name": "test_update_my_profile", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (498, 705)\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x64ef3d48771a <unknown>\n#1 0x64ef3cf2a0a0 <unknown>\n#2 0x64ef3cf8284c <unknown>\n#3 0x64ef3cf806ac <unknown>\n#4 0x64ef3cf7dd42 <unknown>\n#5 0x64ef3cf7d440 <unknown>\n#6 0x64ef3cf6fb9d <unknown>\n#7 0x64ef3cfa13a2 <unknown>\n#8 0x64ef3cf6f51a <unknown>\n#9 0x64ef3cfa156e <unknown>\n#10 0x64ef3cfc72a0 <unknown>\n#11 0x64ef3cfa1173 <unknown>\n#12 0x64ef3cf6dd4b <unknown>\n#13 0x64ef3cf6e9b1 <unknown>\n#14 0x64ef3d44c8cb <unknown>\n#15 0x64ef3d4507ca <unknown>\n#16 0x64ef3d434622 <unknown>\n#17 0x64ef3d451354 <unknown>\n#18 0x64ef3d41945f <unknown>\n#19 0x64ef3d4754f8 <unknown>\n#20 0x64ef3d4756d6 <unknown>\n#21 0x64ef3d486586 <unknown>\n#22 0x75690069caa4 <unknown>\n#23 0x756900729c3c <unknown>", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"53abb364b9975325904db7b766c849bf\")>\n\n    @allure.feature(\"My Profile\")\n    @allure.story(\"Update profile information\")\n    def test_update_my_profile(driver):\n        login_page = LoginPage(driver)\n        profile_page = MyProfilePage(driver)\n    \n        login_page.open()\n        login_page.login(\"ruban.k@webnexs.in\", \"program12@12A\")\n    \n        # Wait for dashboard/profile to load\n        time.sleep(5)\n    \n        # Choose profile\n        profile_page.choose_profile()\n        time.sleep(3)\n    \n        # Open My Profile page\n        profile_page.open_my_profile()\n        time.sleep(3)\n    \n        # Fill and submit the profile form\n>       profile_page.fill_form()\n\nmyprofile/account.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyprofile/account.py:71: in fill_form\n    submit_btn.click()\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3bbd25d820>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x64ef3d486586 \\\\u003Cunknown>\\\\n#22 0x75690069caa4 \\\\u003Cunknown>\\\\n#23 0x756900729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (498, 705)\nE         (Session info: chrome=136.0.7103.113)\nE       Stacktrace:\nE       #0 0x64ef3d48771a <unknown>\nE       #1 0x64ef3cf2a0a0 <unknown>\nE       #2 0x64ef3cf8284c <unknown>\nE       #3 0x64ef3cf806ac <unknown>\nE       #4 0x64ef3cf7dd42 <unknown>\nE       #5 0x64ef3cf7d440 <unknown>\nE       #6 0x64ef3cf6fb9d <unknown>\nE       #7 0x64ef3cfa13a2 <unknown>\nE       #8 0x64ef3cf6f51a <unknown>\nE       #9 0x64ef3cfa156e <unknown>\nE       #10 0x64ef3cfc72a0 <unknown>\nE       #11 0x64ef3cfa1173 <unknown>\nE       #12 0x64ef3cf6dd4b <unknown>\nE       #13 0x64ef3cf6e9b1 <unknown>\nE       #14 0x64ef3d44c8cb <unknown>\nE       #15 0x64ef3d4507ca <unknown>\nE       #16 0x64ef3d434622 <unknown>\nE       #17 0x64ef3d451354 <unknown>\nE       #18 0x64ef3d41945f <unknown>\nE       #19 0x64ef3d4754f8 <unknown>\nE       #20 0x64ef3d4756d6 <unknown>\nE       #21 0x64ef3d486586 <unknown>\nE       #22 0x75690069caa4 <unknown>\nE       #23 0x756900729c3c <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "start": 1748419708079, "stop": 1748419782238, "uuid": "c1f93071-c6cf-407e-bfc7-18372b36c3f1", "historyId": "a53c958fd90f9a1f5110d0f0a140b914", "testCaseId": "a53c958fd90f9a1f5110d0f0a140b914", "fullName": "myprofile.account#test_update_my_profile", "labels": [{"name": "story", "value": "Update profile information"}, {"name": "feature", "value": "My Profile"}, {"name": "parentSuite", "value": "myprofile"}, {"name": "suite", "value": "account"}, {"name": "host", "value": "ruban"}, {"name": "thread", "value": "6380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "myprofile.account"}]}